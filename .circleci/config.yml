# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

orbs:
  aws-eks: circleci/aws-eks@2.2.0

jobs:

  test-build:
    working_directory: ~/apps
    docker:
      - image: 'circleci/python:3.6.7-stretch'
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run:
          name: Install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
      - run:
          name: Lint dockerfile
          command: |
            . venv/bin/activate
            make lint
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  build-docker-image:
    ##https://circleci.com/blog/how-to-build-a-docker-image-on-circleci-2-0/
    working_directory: ~/apps
    docker:
      - image: 'cimg/deploy:2023.05'
    steps:
      - checkout
      - setup_remote_docker  
      - run:
          name: Build Docker image
          command: |
            # Step 1 - Build Docker Iamge
            docker build --tag=helloworld .
            # Step 2 - List docker images
            docker image ls
      - run:
          name: Push Docker image
          command: |    
            # Step 3 - Push the Dockerfile
            dockerpath="mccowna/helloworld:${CIRCLE_WORKFLOW_ID:0:7}"
            echo "Docker ID and Image: $dockerpath"
            docker login --username "$DOCKERHUB_USERNAME" --password "$DOCKERHUB_PASSWORD" 
            docker tag helloworld $dockerpath
            docker push $dockerpath
            ##add a comment

  deploy-application:
    working_directory: ~/apps
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-   
      - run:
          name: IAM Authenticator
          command: |
            # curl -o aws-iam-authenticator https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/aws-iam-authenticator

            curl -Lo aws-iam-authenticator https://github.com/kubernetes-sigs/aws-iam-authenticator/releases/download/v0.5.9/aws-iam-authenticator_0.5.9_linux_amd64

            chmod +x ./aws-iam-authenticator
            sudo mv ./aws-iam-authenticator /usr/local/bin/aws-iam-authenticator
            aws-iam-authenticator help

      - run:
          name: Install packages (kubectl $ eksctl)
          command: |
            # curl -o kubectl https://amazon-eks.s3-us-west-2.amazonaws.com/1.13.7/2019-06-11/bin/linux/amd64/kubectl
            curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.22.15/2022-10-31/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl

            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
            sudo mv /tmp/eksctl /usr/local/bin

      - run:
          name: Install awscli and gettext-base
          command: |
            sudo pip3 install awscli
      - run:
          name: Deploy Docker Image to EKS Cluster
          command: |
            ## install kunectl
            ##curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.25.7/2023-03-17/bin/linux/amd64/kubectl
            ##chmod +x ./kubectl
            ##mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
            ##echo 'export PATH=$HOME/bin:$PATH' >> ~/.bashrc
            kubectl version --short --client
            ## Check Identity
            aws sts get-caller-identity
            ## update kubeconfig 
            aws eks --region eu-west-1 update-kubeconfig --name Capstone
            ##
            kubectl get pods
            ## Promote code
            kubectl set image deployments/helloworld-app-deployment helloworld-app-deployment=mccowna/helloworld:${CIRCLE_WORKFLOW_ID:0:7} -n helloworld
            ##Check Status
            kubectl get all -n helloworld
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
            
workflows:
  updateapp:
    jobs:
      - test-build
      - build-docker-image:
          requires:
            - test-build
      - deploy-application:
          requires: 
            - build-docker-image
